#!/usr/bin/env python3
import json
import os
import subprocess
from argparse import ArgumentParser


def main(args):
    if args.user_name == "postgres":
        dbms = args.host.split(".")[0]
        password = (
            os.popen(
                "az keyvault secret show --name "
                + dbms
                + " --vault-name \"lxdbms\" | jq -r '.value'"
            )
            .read()
            .strip()
        )
        os.environ["PGPASSWORD"] = str(password)
        if args.type == "single":
            args.user_name = f"{args.user_name}@{args.host}"

    cmd = f"pgcli -h {args.host} -u {args.user_name} -d {args.database} -w"
    subprocess.run(cmd, shell=True)


def setDefaults(args):
    if args.namespace != None: subprocess.run(["kubens", args.namespace])
    if args.region != None:
        cluster = os.popen(
            "kubectx | grep " + args.region + "-" + args.environment
        ).read().strip()
        subprocess.run(["kubectx", cluster])

    namespace = os.popen(
        "kubectl config view --minify --output jsonpath={..namespace}"
    ).read()

    if namespace == None:
        print("No namespace specified.")
        exit(1)

    k8s_postgres_configmap_json = json.loads(
        os.popen(
            f"kubectl get configmaps -n {namespace} postgres -o json | jq -r .data"
        ).read().strip()
    )

    args.host = (
        k8s_postgres_configmap_json["host"]
        if args.host == None
        else args.host
    )
    args.user_name = (
        'SEC-Azure-Engineering'
        if args.user_name == None
        else args.user_name
    )
    args.database = (
        k8s_postgres_configmap_json["database"]
        if args.database == None
        else args.database
    )
    if not has_valid_token():
        az_login()
    password = os.popen(
        "az account get-access-token --resource-type oss-rdbms --query '[accessToken]' -o tsv"
    ).read().strip()
    os.environ["PGPASSWORD"] = str(password)


def az_login() -> None:
    try:
        result = subprocess.run(['az', 'login'], capture_output=True, text=True, check=True)
        if "You have logged in" in result.stdout:
            print("You are logged in.")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        print("You are not logged in.")


def has_valid_token() -> bool:
    try:
        result = subprocess.run(['az', 'account', 'show'], capture_output=True, text=True, check=True)
        account_info = json.loads(result.stdout)
        if 'user' in account_info and 'name' in account_info['user']:
            print(f"You are already logged in as: {account_info['user']['name']}")
            return True
    except subprocess.CalledProcessError as e:
        print(f"No token found. Logging in again via browser.")
        return False


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument(
        "-u",
        "--user",
        dest="user_name",
        required=False,
        help="set which user to use",
        metavar="USER",
    )
    parser.add_argument(
        "-n",
        "--namespace",
        dest="namespace",
        required=False,
        help="set which namespace to use",
        metavar="NAMESPACE",
    )
    parser.add_argument(
        "-t",
        "--type",
        dest="type",
        required=False,
        help="set which DBMS type to use (single|flexible)",
        metavar="TYPE",
        default="flexible",
    )
    parser.add_argument(
        "-d",
        "--database",
        dest="database",
        required=False,
        help="set which database to connect to",
        metavar="DATABASE",
    )
    parser.add_argument(
        "-o",
        "--host",
        dest="host",
        required=False,
        help="set host to be used",
        metavar="HOST",
    )
    parser.add_argument(
        "-r",
        "--region",
        dest="region",
        required=False,
        help="set region to be used",
        metavar="REGION",
    )
    parser.add_argument(
        "-e",
        "--environment",
        dest="environment",
        required=False,
        help="set environment to be used",
        metavar="ENVIRONMENT",
        default="prod",
    )

    parser.add_argument(
        "-i",
        "--install",
        dest="install",
        required=False,
        action='store_true',
        help="Installs the script to /usr/local/bin/pgazure",
    )

    args = parser.parse_args()

    if args.region and not args.namespace:
        print("If region is set, namespace must be set")
        exit(1)

    if args.install:
        subprocess.run("cp pgazure.py /usr/local/bin/pgazure && chmod +x /usr/local/bin/pgazure", shell=True)
        exit(0)

    defaults = setDefaults(args)
    main(args)
